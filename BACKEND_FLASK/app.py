from werkzeug.exceptions import MethodNotAllowed
import json
import os
import time
import traceback
import re
from flask import Flask, jsonify, request, make_response
from flask_cors import CORS
from dotenv import load_dotenv
from concurrent.futures import ThreadPoolExecutor

# ---------------------------
# üîß AI client setup
# ---------------------------
try:
    import google.generativeai as genai
    from google.api_core.exceptions import ResourceExhausted
except Exception:
    genai = None
    ResourceExhausted = Exception  # fallback

# ---------------------------
# ‚öôÔ∏è Load environment
# ---------------------------
load_dotenv()
app = Flask(__name__)
# Explicit CORS config (allows all origins ‚Äî fine for dev; tighten in production)
CORS(app, resources={r"/*": {"origins": "*"}}, supports_credentials=True)

app.config["JSON_SORT_KEYS"] = False

GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY") or os.getenv("GOOGLE_API_FALLBACK", "")
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-2.0-flash")

if genai and GOOGLE_API_KEY:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        app.logger.info(f"‚úÖ Google Generative AI configured (model={GEMINI_MODEL}).")
    except Exception as e:
        app.logger.error(f"‚ùå Failed to configure Gemini API: {e}")

# ---------------------------
# ‚öôÔ∏è Global state
# ---------------------------
executor = ThreadPoolExecutor(max_workers=3)
quiz_cache = {}

# ---------------------------
# üîÅ Danh s√°ch model fallback (2.x tr·ªü l√™n)
# ---------------------------
MODELS_TO_TRY = [
    GEMINI_MODEL,
    "gemini-2.5-pro",
    "gemini-2.5-flash",
    "gemini-2.0-pro",
    "gemini-2.0-flash",
    "gemini-2.0-flash-lite",
    "gemini-2.5-flash-lite-preview-09-2025",
    "gemini-2.5-flash-native-audio-preview-09-2025",
]

# ---------------------------
# Middleware: log request for debugging
# ---------------------------
@app.before_request
def log_request_info():
    try:
        app.logger.info("----- Incoming Request -----")
        app.logger.info(f"Remote Addr: {request.remote_addr}")
        app.logger.info(f"Method: {request.method} URL: {request.url}")
        headers = {k: v for k, v in request.headers.items()}
        app.logger.info(f"Headers: {headers}")
        # Avoid logging huge bodies but log content-type and length
        app.logger.info(f"Content-Type: {request.content_type} Content-Length: {request.content_length}")
    except Exception as e:
        app.logger.warning(f"Failed to log request info: {e}")

# Ensure preflight requests (OPTIONS) return 200 quickly
@app.route("/", methods=["OPTIONS"])
@app.route("/<path:anypath>", methods=["OPTIONS"])
def handle_options(anypath=None):
    resp = make_response()
    resp.status_code = 200
    return resp

# After-request to ensure proper CORS and allow headers (helps with proxies/CDN)
@app.after_request
def add_cors_headers(response):
    response.headers.setdefault("Access-Control-Allow-Origin", "*")
    response.headers.setdefault("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
    response.headers.setdefault("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With, Accept")
    response.headers.setdefault("Access-Control-Expose-Headers", "Content-Type, Authorization")
    return response

# Health check route
@app.route("/healthz", methods=["GET"])
def healthz():
    return jsonify({"status": "ok"}), 200

# ---------------------------
# üß† Sinh n·ªôi dung t·ª´ AI
# ---------------------------
def generate_text(prompt, retries=2):
    if genai is None:
        raise RuntimeError("Google generative AI client not available.")

    generation_config = {
        "temperature": 0.3,
        "top_p": 0.8,
        "max_output_tokens": 1600,
        "response_mime_type": "application/json",
    }

    for attempt in range(retries):
        for model_name in MODELS_TO_TRY:
            if "1.5" in model_name:
                continue  # ‚ùå Kh√¥ng d√πng model 1.5 n·ªØa

            try:
                app.logger.info(f"üîç Trying model: {model_name}")
                model = genai.GenerativeModel(model_name)
                response = model.generate_content(prompt, generation_config=generation_config)

                text = ""
                if response and hasattr(response, "candidates") and response.candidates:
                    parts = getattr(response.candidates[0].content, "parts", [])
                    text = "".join(getattr(p, "text", "") for p in parts)

                if text.strip():
                    return text.strip()

            except ResourceExhausted:
                app.logger.warning(f"‚ö†Ô∏è Model {model_name} quota exhausted.")
                continue
            except Exception as e:
                app.logger.warning(f"‚ö†Ô∏è Model {model_name} failed: {e}")
                continue

        time.sleep(0.6)

    raise Exception("‚ùå All models failed or returned invalid data.")

# ---------------------------
# üîç Parse JSON an to√†n
# ---------------------------
def safe_parse_json(text):
    def try_load(s):
        try:
            return json.loads(s)
        except Exception:
            return None

    if not text:
        return None

    try:
        json_match = re.search(r'\{[\s\S]*\}', text)
        if not json_match:
            raise ValueError("No JSON object found.")
        clean_text = json_match.group(0).strip()

        parsed = try_load(clean_text)
        if parsed:
            return parsed

        fix_text = (
            clean_text.replace("\n", " ")
            .replace("\r", "")
            .replace(", }", "}")
            .replace(",]", "]")
            .replace("‚Äô", "'")
            .replace("‚Äú", '"')
            .replace("‚Äù", '"')
            .replace("'", '"')
        )

        parsed = try_load(fix_text)
        if parsed:
            return parsed

        first, last = fix_text.find("{"), fix_text.rfind("}")
        if first != -1 and last != -1:
            parsed = try_load(fix_text[first:last + 1])
            if parsed:
                return parsed

        raise ValueError("Could not parse cleaned JSON.")
    except Exception as e:
        app.logger.warning(f"‚ö†Ô∏è JSON parse th·∫•t b·∫°i: {e}")
        return None

# ---------------------------
# üî¢ Chu·∫©n h√≥a k√Ω hi·ªáu
# ---------------------------
def normalize_math_symbols(text: str) -> str:
    """
    Chu·∫©n h√≥a m·ªôt chu·ªói vƒÉn b·∫£n ch·ª©a c√°c k√Ω hi·ªáu v√† c√¥ng th·ª©c to√°n h·ªçc,
    h√≥a h·ªçc v√† v·∫≠t l√Ω v·ªÅ ƒë·ªãnh d·∫°ng Unicode ƒë·∫πp m·∫Øt.

    Args:
        text: Chu·ªói vƒÉn b·∫£n ƒë·∫ßu v√†o.

    Returns:
        Chu·ªói vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a.
    """
    if not text or not isinstance(text, str):
        return text

    # --- 1. T·ª´ ƒëi·ªÉn chuy·ªÉn ƒë·ªïi (Gi·ªØ nguy√™n nh∆∞ c≈©) ---
    latex_unicode_map = {
        r'\\alpha': 'Œ±', r'\\beta': 'Œ≤', r'\\gamma': 'Œ≥', r'\\delta': 'Œ¥', r'\\epsilon': 'Œµ',
        r'\\zeta': 'Œ∂', r'\\eta': 'Œ∑', r'\\theta': 'Œ∏', r'\\iota': 'Œπ', r'\\kappa': 'Œ∫',
        r'\\lambda': 'Œª', r'\\mu': 'Œº', r'\\nu': 'ŒΩ', r'\\xi': 'Œæ', r'\\omicron': 'Œø',
        r'\\pi': 'œÄ', r'\\rho': 'œÅ', r'\\sigma': 'œÉ', r'\\tau': 'œÑ', r'\\upsilon': 'œÖ',
        r'\\phi': 'œÜ', r'\\chi': 'œá', r'\\psi': 'œà', r'\\omega': 'œâ',
        r'\\Gamma': 'Œì', r'\\Delta': 'Œî', r'\\Theta': 'Œò', r'\\Lambda': 'Œõ', r'\\Xi': 'Œû',
        r'\\Pi': 'Œ†', r'\\Sigma': 'Œ£', r'\\Upsilon': 'Œ•', r'\\Phi': 'Œ¶', r'\\Psi': 'Œ®',
        r'\\Omega': 'Œ©',
        r'\\pm': '¬±', r'\\times': '√ó', r'\\div': '√∑', r'\\cdot': '‚ãÖ', r'\\neq': '‚â†',
        r'\\leq': '‚â§', r'\\geq': '‚â•', r'\\approx': '‚âà', r'\\equiv': '‚â°', r'\\in': '‚àà',
        r'\\notin': '‚àâ', r'\\subset': '‚äÇ', r'\\supset': '‚äÉ', r'\\subseteq': '‚äÜ',
        r'\\supseteq': '‚äá', r'\\sum': '‚àë', r'\\int': '‚à´', r'\\partial': '‚àÇ',
        r'\\nabla': '‚àá', r'\\infty': '‚àû', r'\\forall': '‚àÄ', r'\\exists': '‚àÉ',
        r'\\angle': '‚à†', r'\\perp': '‚ä•',
        r'\\rightarrow': '‚Üí', r'\\leftarrow': '‚Üê', r'\\leftrightarrow': '‚Üî',
        r'\\Rightarrow': '‚áí', r'\\Leftarrow': '‚áê', r'\\Leftrightarrow': '‚áî',
        r'\\uparrow': '‚Üë', r'\\downarrow': '‚Üì',
        r'\\ldots': '‚Ä¶', r'\\cdots': '‚ãØ', r'\\vdots': '‚ãÆ', r'\\ddots': '‚ã±',
        r'\\circ': '¬∞',
    }
    keyword_map = {
        r'sqrt': '‚àö', 'inf': '‚àû',
    }
    operator_map = {
        '>=': '‚â•', '<=': '‚â§', '!=': '‚â†', '->': '‚Üí', '<-': '‚Üê', '<=>': '‚áî'
    }
    superscript_map = str.maketrans("0123456789+-=()n", "‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ‚Å∫‚Åª‚Åº‚ÅΩ‚Åæ‚Åø")
    subscript_map = str.maketrans("0123456789+-=()aehijklmnoprstuvx", "‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ‚Çä‚Çã‚Çå‚Çç‚Çé‚Çê‚Çë‚Çï·µ¢‚±º‚Çñ‚Çó‚Çò‚Çô‚Çí‚Çö·µ£‚Çõ‚Çú·µ§·µ•‚Çì")

    # --- 2. Th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi ---
    # Thay th·∫ø c√°c to√°n t·ª≠ ƒë·∫∑c bi·ªát
    for op, uni in operator_map.items():
        text = text.replace(op, uni)
    # Thay th·∫ø c√°c l·ªánh LaTeX
    for latex, uni in latex_unicode_map.items():
        text = re.sub(latex + r'\b', uni, text)
    # Thay th·∫ø c√°c t·ª´ kh√≥a
    for keyword, uni in keyword_map.items():
        text = re.sub(r'\b' + keyword + r'\b', uni, text, flags=re.IGNORECASE)
    # Thay th·∫ø k√Ω hi·ªáu ƒë·ªô d·∫°ng `^o`
    text = re.sub(r'\^o\b', '¬∞', text)

    # --- 3. X·ª≠ l√Ω c√°c c·∫•u tr√∫c ph·ª©c t·∫°p h∆°n b·∫±ng Regex ---

    # C·∫¢I TI·∫æN: Chu·∫©n h√≥a cƒÉn b·∫≠c hai v√† th√™m ngo·∫∑c ƒë·ªÉ r√µ r√†ng
    # Thay v√¨ r"‚àö\1", ta d√πng r"‚àö(\1)"
    text = re.sub(r"‚àö\s*[{<(]([^})>]+)[})>]", r"‚àö(\1)", text)

    # Chu·∫©n h√≥a ph√¢n s·ªë
    text = re.sub(r"\\frac{([^}]+)}{([^}]+)}", r"(\1/\2)", text)
    # Chu·∫©n h√≥a vector
    text = re.sub(r"\\vec{([^}]+)}", r"\1‚Éó", text)
    # Chu·∫©n h√≥a g√≥c d·∫°ng "hat"
    def add_hat(m):
        return m.group(1) + '\u0302'
    text = re.sub(r"\\hat{([A-Za-z])}", add_hat, text)
    # Chu·∫©n h√≥a ch·ªâ s·ªë tr√™n (superscript)
    def to_superscript(m):
        return m.group(1).translate(superscript_map)
    text = re.sub(r"\^\{([^}]+)\}", to_superscript, text)
    text = re.sub(r"\^([0-9n()+\-]+)", to_superscript, text)
    # Chu·∫©n h√≥a ch·ªâ s·ªë d∆∞·ªõi (subscript)
    def to_subscript(m):
        return m.group(1).translate(subscript_map)
    text = re.sub(r"_{([^}]+)}", to_subscript, text)
    text = re.sub(r"_([0-9aehijklmnoprstuvx]+)", to_subscript, text)
    # Chu·∫©n h√≥a c√¥ng th·ª©c h√≥a h·ªçc
    def chemical_subscripts(match):
        formula = match.group(0)
        return re.sub(r"(?<=[A-Za-z])([0-9]+)", lambda m: m.group(1).translate(subscript_map), formula)
    text = re.sub(r"\b([A-Z][a-z]?\d*)+", chemical_subscripts, text)

    # --- 4. D·ªçn d·∫πp cu·ªëi c√πng ---
    text = text.replace("\\", "")
    text = re.sub(r"\s+", " ", text).strip()

    return text


# ---------------------------
# üß© API sinh ƒë·ªÅ tr·∫Øc nghi·ªám (b·∫£n c√≥ TTL + force_regen)
# ---------------------------
@app.route("/api/generate-quiz", methods=["POST", "OPTIONS"])
def api_generate_quiz():
    start_time = time.time()
    try:
        # Try to parse JSON more robustly
        try:
            data = request.get_json(force=False, silent=True)
            if data is None:
                # Fallback: try reading raw data as text then json loads
                raw = request.data.decode("utf-8", errors="ignore")
                data = json.loads(raw) if raw else {}
        except Exception:
            data = {}
        # If still None -> empty dict
        data = data or {}

        # Log incoming payload (gi√∫p debug)
        app.logger.info(f"Payload received: {data}")

        subject = data.get("subject", "")
        grade = str(data.get("grade", ""))
        topic = data.get("topic", "").strip()

        # Parse numbers an to√†n (n·∫øu frontend kh√¥ng g·ª≠i, d√πng default)
        try:
            num_mcq = int(data.get("num_mcq", 10) or 10)
        except (ValueError, TypeError):
            num_mcq = 10
        try:
            num_tf = int(data.get("num_tf", 4) or 4)
        except (ValueError, TypeError):
            num_tf = 4

        force_regen = bool(data.get("force_regen", False))

        CACHE_TTL = 120  # ‚è± 2 ph√∫t
        cache_key = json.dumps(
            {"subject": subject, "grade": grade, "topic": topic, "num_mcq": num_mcq, "num_tf": num_tf},
            sort_keys=True
        )

        # ‚ö° Ki·ªÉm tra cache
        cached_entry = quiz_cache.get(cache_key)
        if (
            not force_regen
            and cached_entry
            and (time.time() - cached_entry["time"] < CACHE_TTL)
        ):
            app.logger.info("‚ö° Tr·∫£ ƒë·ªÅ t·ª´ cache RAM (h·ª£p l·ªá trong TTL).")
            return jsonify(cached_entry["data"])

        # N·∫øu client g·ªçi m√† kh√¥ng c√≥ client AI config -> tr·∫£ l·ªói r√µ
        if genai is None or not GOOGLE_API_KEY:
            app.logger.error("AI client not configured (genai or GOOGLE_API_KEY missing).")
            return jsonify({"error": "AI service not configured"}), 503

        # ---------------------------
        # PROMPT 1: MCQ
        # ---------------------------
        prompt_mcq = f"""
Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng markdown.
T·∫°o {num_mcq} c√¢u h·ªèi tr·∫Øc nghi·ªám nhi·ªÅu l·ª±a ch·ªçn (MCQ) cho h·ªçc sinh:
- M√¥n h·ªçc: {subject}
- L·ªõp: {grade}
- Ch·ªß ƒë·ªÅ: {topic}
- Trong ƒë√≥ c√≥ 40% c√¢u ·ªü m·ª©c ƒë·ªô nh·∫≠n bi·∫øt, 30% c√¢u ·ªü m·ª©c ƒë·ªô hi·ªÉu, 30% c√¢u ·ªü m·ª©c ƒë·ªô v·∫≠n d·ª•ng.
ƒê·ªãnh d·∫°ng:
{{
  "questions": [
    {{
      "type": "mcq",
      "question": "...",
      "options": ["A. ...", "B. ...", "C. ...", "D. ..."],
      "answer": "A"
    }}
  ]
}}
"""

        # ---------------------------
        # PROMPT 2: True/False
        # ---------------------------
        prompt_tf = f"""
Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng markdown.
T·∫°o {num_tf} c√¢u h·ªèi d·∫°ng ƒê√∫ng/Sai cho h·ªçc sinh:
- M√¥n h·ªçc: {subject}
- L·ªõp: {grade}
- Ch·ªß ƒë·ªÅ: {topic}
- Trong ƒë√≥ c√≥ 50% c√¢u ·ªü m·ª©c ƒë·ªô nh·∫≠n bi·∫øt, 25% c√¢u ·ªü m·ª©c ƒë·ªô hi·ªÉu, 25% c√¢u ·ªü m·ª©c ƒë·ªô v·∫≠n d·ª•ng.
ƒê·ªãnh d·∫°ng:
{{
  "questions": [
    {{
      "type": "truefalse",
      "question": "...",
      "options": ["A. ƒê√∫ng", "B. Sai"],
      "answer": "A"
    }}
  ]
}}
"""

        # üß† Sinh song song MCQ v√† True/False
        fut_mcq = executor.submit(generate_text, prompt_mcq)
        fut_tf = executor.submit(generate_text, prompt_tf)
        raw_mcq, raw_tf = fut_mcq.result(timeout=25), fut_tf.result(timeout=25)

        data_mcq = safe_parse_json(raw_mcq) or {"questions": []}
        data_tf = safe_parse_json(raw_tf) or {"questions": []}

        all_questions = data_mcq.get("questions", []) + data_tf.get("questions", [])
        expected_total = num_mcq + num_tf

        # üîß N·∫øu thi·∫øu c√¢u h·ªèi, sinh b·ªï sung
        if len(all_questions) < expected_total:
            missing = expected_total - len(all_questions)
            app.logger.warning(f"‚ö†Ô∏è Thi·∫øu {missing} c√¢u, sinh b·ªï sung.")
            prompt_fix = f"T·∫°o th√™m {missing} c√¢u h·ªèi cho {subject} l·ªõp {grade} ch·ªß ƒë·ªÅ {topic}, ƒë·ªãnh d·∫°ng JSON nh∆∞ tr∆∞·ªõc."
            extra = generate_text(prompt_fix)
            data_extra = safe_parse_json(extra)
            if data_extra and isinstance(data_extra, dict):
                all_questions += data_extra.get("questions", [])

        # üî¢ Chu·∫©n h√≥a k√Ω hi·ªáu to√°n h·ªçc
        for q in all_questions:
            for field in ["question", "answer"]:
                if field in q and isinstance(q[field], str):
                    q[field] = normalize_math_symbols(q[field])
            if "options" in q and isinstance(q["options"], list):
                q["options"] = [normalize_math_symbols(opt) for opt in q["options"]]

        result = {"questions": all_questions[:expected_total]}

        # üíæ L∆∞u cache c√πng timestamp
        quiz_cache[cache_key] = {"data": result, "time": time.time()}

        elapsed = round((time.time() - start_time) * 1000)
        app.logger.info(f"‚úÖ Sinh ƒë·ªÅ ho√†n t·∫•t: {len(result['questions'])} c√¢u ({elapsed} ms)")
        return jsonify(result)

    except MethodNotAllowed:
        app.logger.warning("‚ö†Ô∏è Method not allowed on /api/generate-quiz")
        return jsonify({"error": "Method not allowed"}), 405

    except Exception as e:
        app.logger.error(f"‚ùå Exception: {e}\n{traceback.format_exc()}")
        return jsonify({"error": "Internal server error"}), 500

@app.route("/", methods=["GET"])
def home():
    return jsonify({"message": "‚úÖ AI_CHIRON26 backend is running"}), 200

# ------------------------------
# ü©∫ HEALTH CHECK / KEEP ALIVE
# ------------------------------
@app.route("/ping", methods=["GET"])
def ping():
    """Route ƒë·ªÉ ki·ªÉm tra backend c√≤n s·ªëng hay kh√¥ng"""
    return {"status": "ok"}, 200

# ---------------------------
# üöÄ Run server
# ---------------------------
if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
