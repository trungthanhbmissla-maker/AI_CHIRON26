import json 
import os
from flask import Flask, jsonify, request
from flask_cors import CORS
from dotenv import load_dotenv
import google.generativeai as genai
from google.api_core.exceptions import ResourceExhausted


# 1Ô∏è‚É£ T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# 2Ô∏è‚É£ Kh·ªüi t·∫°o Flask app
app = Flask(__name__)
CORS(app)

# 3Ô∏è‚É£ L·∫•y API key linh ho·∫°t (∆∞u ti√™n .env, fallback n·∫øu kh√¥ng c√≥)
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

if not GOOGLE_API_KEY or GOOGLE_API_KEY.strip() == "":
    GOOGLE_API_KEY = "AIzaSyBo1nrSGr80CQgV9MDNoW4WVnKPesaZeAc"  # üîß D√°n key d·ª± ph√≤ng v√†o ƒë√¢y
    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y GOOGLE_API_KEY trong .env ‚Üí ƒëang d√πng key d·ª± ph√≤ng trong code.")

if not GOOGLE_API_KEY:
    raise ValueError("‚ùå Kh√¥ng t√¨m th·∫•y GOOGLE_API_KEY. Vui l√≤ng ƒë·∫∑t trong file .env ho·∫∑c trong code fallback.")

# 4Ô∏è‚É£ C·∫•u h√¨nh Gemini
try:
    genai.configure(api_key=GOOGLE_API_KEY)
    print("‚úÖ C·∫•u h√¨nh Gemini API th√†nh c√¥ng.")
except Exception as e:
    print(f"‚ùå L·ªói khi c·∫•u h√¨nh Gemini API: {e}")
    raise

# 5Ô∏è‚É£ Danh s√°ch model fallback
MODELS_TO_TRY = [
    "gemini-2.5-flash",
    "gemini-2.5-pro",
    "gemini-2.0-flash-lite",
    "gemini-2.0-flash",
    "gemini-2.0-pro"
]

# 6Ô∏è‚É£ H√†m g·ªçi Gemini an to√†n, c√≥ fallback + x·ª≠ l√Ω finish_reason
def generate_text(prompt, safety_settings, generation_config):
    for model_name in MODELS_TO_TRY:
        try:
            print(f"üîÑ Th·ª≠ model: {model_name}")
            model = genai.GenerativeModel(model_name=model_name)
            response = model.generate_content(
                prompt,
                safety_settings=safety_settings,
                generation_config=generation_config,
            )

            # ‚úÖ Ki·ªÉm tra ph·∫£n h·ªìi h·ª£p l·ªá
            if response and hasattr(response, "candidates") and response.candidates:
                candidate = response.candidates[0]
                if hasattr(candidate, "content") and candidate.content:
                    parts = getattr(candidate.content, "parts", [])
                    text = ""
                    for p in parts:
                        if hasattr(p, "text"):
                            text += p.text
                    if text.strip():
                        print(f"‚úÖ Th√†nh c√¥ng v·ªõi model {model_name}")
                        return text.strip()

            print(f"‚ö†Ô∏è Model {model_name} kh√¥ng tr·∫£ v·ªÅ n·ªôi dung h·ª£p l·ªá (finish_reason={getattr(candidate, 'finish_reason', 'unknown')})")

        except ResourceExhausted:
            print(f"‚ö†Ô∏è Model {model_name} h·∫øt quota, th·ª≠ model kh√°c...")
            continue
        except Exception as e:
            print(f"‚ùå L·ªói v·ªõi model {model_name}: {e}")
            continue

    raise Exception("Kh√¥ng c√≥ model n√†o ph·∫£n h·ªìi h·ª£p l·ªá ho·∫∑c c√≤n quota.")


@app.route('/')
def home():
    return jsonify({"message": "‚úÖ Backend ƒëang ch·∫°y!"})

# ======================
# API: T·∫°o ƒë·ªÅ tr·∫Øc nghi·ªám
# ======================
@app.route('/api/generate-quiz', methods=['POST'])
def generate_quiz():
    try:
        data = request.get_json()
        subject = data.get("subject", "To√°n")
        grade = data.get("grade", "10")

        prompt = f"""
        Ch·ªâ tr·∫£ v·ªÅ DUY NH·∫§T m·ªôt ƒë·ªëi t∆∞·ª£ng JSON h·ª£p l·ªá, kh√¥ng c√≥ markdown, kh√¥ng c√≥ ch√∫ th√≠ch.
        H√£y t·∫°o ƒë·ªÅ tr·∫Øc nghi·ªám m√¥n {subject} l·ªõp {grade}, g·ªìm:
        - 10 c√¢u h·ªèi tr·∫Øc nghi·ªám 4 l·ª±a ch·ªçn (A, B, C, D)
        - 4 c√¢u h·ªèi ƒë√∫ng/sai, m·ªói c√¢u c√≥ 2 l·ª±a ch·ªçn ("ƒê√∫ng", "Sai")

        M·∫´u JSON ch√≠nh x√°c nh∆∞ sau:
        {{
            "questions": [
                {{
                    "type": "mcq",
                    "question": "C√¢u h·ªèi 1...",
                    "options": ["A...", "B...", "C...", "D..."],
                    "answer": "B"
                }},
                {{
                    "type": "truefalse",
                    "question": "C√¢u h·ªèi ƒë√∫ng sai...",
                    "options": ["ƒê√∫ng", "Sai"],
                    "answer": "ƒê√∫ng"
                }}
            ]
        }}

        C√°c y√™u c·∫ßu nghi√™m ng·∫∑t:
        - Kh√¥ng d√πng markdown (kh√¥ng ```json, kh√¥ng ```).
        - Kh√¥ng th√™m m√¥ t·∫£, ch·ªâ in ra JSON h·ª£p l·ªá.
        - C√¢u h·ªèi v√† ƒë√°p √°n ph·∫£i b·∫±ng ti·∫øng Vi·ªát.
        - ƒê·∫£m b·∫£o JSON c√≥ th·ªÉ ph√¢n t√≠ch tr·ª±c ti·∫øp b·∫±ng json.loads().
        """

        # C·∫•u h√¨nh AI
        safety_settings = {
            'HATE': 'BLOCK_NONE',
            'HARASSMENT': 'BLOCK_NONE',
            'SEXUAL': 'BLOCK_NONE',
            'DANGEROUS': 'BLOCK_NONE'
        }
        generation_config = {
            "temperature": 0.7,
            "max_output_tokens": 8192
        }

        raw_text = generate_text(prompt, safety_settings, generation_config)

        print("\n--- Gemini Raw Response ---")
        print(raw_text)
        print("---------------------------\n")

        # --- L√†m s·∫°ch chu·ªói JSON ---
        raw_text = raw_text.strip()
        if raw_text.startswith("```json"):
            raw_text = raw_text[7:]
        if raw_text.endswith("```"):
            raw_text = raw_text[:-3]
        raw_text = raw_text.strip()

        try:
            quiz_data = json.loads(raw_text)
            # Ki·ªÉm tra t·ªëi thi·ªÉu c√≥ tr∆∞·ªùng "questions"
            if "questions" not in quiz_data:
                return jsonify({"error": "D·ªØ li·ªáu AI tr·∫£ v·ªÅ kh√¥ng c√≥ tr∆∞·ªùng 'questions'."}), 500

            return jsonify(quiz_data)
        except json.JSONDecodeError:
            print("‚ùå L·ªñI: D·ªØ li·ªáu AI kh√¥ng ph·∫£i JSON h·ª£p l·ªá.")
            return jsonify({"error": "AI tr·∫£ v·ªÅ d·ªØ li·ªáu sai ƒë·ªãnh d·∫°ng JSON."}), 500

    except Exception as e:
        print("‚ùå L·ªñI KH√ÅC:", e)
        return jsonify({"error": str(e)}), 500



if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
