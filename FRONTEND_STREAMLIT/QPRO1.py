import streamlit as st
import requests
import time
import streamlit.components.v1 as components

# ================================
# C·∫§U H√åNH TRANG
# ================================
st.set_page_config(page_title="T·∫°o ƒê·ªÅ Tr·∫Øc Nghi·ªám AI", layout="centered")
st.title("üìñ T·∫°o ƒë·ªÅ tr·∫Øc nghi·ªám AI")

# ================================
# KH·ªûI T·∫†O SESSION STATE
# ================================
# Kh·ªüi t·∫°o c√°c gi√° tr·ªã c·∫ßn thi·∫øt n·∫øu ch√∫ng ch∆∞a t·ªìn t·∫°i
for key in ['quiz_data', 'user_answers', 'start_time', 'submitted']:
    if key not in st.session_state:
        st.session_state[key] = None

# ================================
# GIAO DI·ªÜN NH·∫¨P LI·ªÜU
# ================================
subjects = ["To√°n", "V·∫≠t l√Ω", "H√≥a h·ªçc", "Sinh h·ªçc", "L·ªãch s·ª≠", "ƒê·ªãa l√Ω", "Ti·∫øng Anh"]
grades = list(range(1, 13))

col1, col2 = st.columns(2)
with col1:
    subject = st.selectbox("Ch·ªçn m√¥n h·ªçc", subjects)
with col2:
    grade = st.selectbox("Ch·ªçn kh·ªëi l·ªõp", grades, index=9)

# ================================
# N√öT T·∫†O ƒê·ªÄ
# ================================
if st.button("üöÄ T·∫°o ƒë·ªÅ tr·∫Øc nghi·ªám", type="primary"):
    with st.spinner("üß† AI ƒëang so·∫°n ƒë·ªÅ, vui l√≤ng ch·ªù..."):
        try:
            # ‚ö†Ô∏è THAY TH·∫æ B·∫∞NG URL BACKEND ONLINE C·ª¶A B·∫†N KHI DEPLOY
            api_url = "http://127.0.0.1:5000/api/generate-quiz"
            payload = {"subject": subject, "grade": str(grade)}
            response = requests.post(api_url, json=payload)

            if response.status_code == 200:
                # Reset l·∫°i tr·∫°ng th√°i cho b√†i thi m·ªõi
                st.session_state.quiz_data = response.json()
                st.session_state.user_answers = {}
                st.session_state.start_time = None
                st.session_state.submitted = False
                st.success("‚úÖ T·∫°o ƒë·ªÅ th√†nh c√¥ng!")
                st.rerun() # T·∫£i l·∫°i trang ƒë·ªÉ b·∫Øt ƒë·∫ßu l√†m b√†i
            else:
                st.error(f"‚ùå L·ªói t·ª´ backend: {response.json().get('error', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}")
        except requests.exceptions.ConnectionError:
            st.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn backend. H√£y ki·ªÉm tra server Flask.")
        except Exception as e:
            st.error(f"‚ùå ƒê√£ x·∫£y ra l·ªói: {e}")

# ================================
# HI·ªÇN TH·ªä ƒê·ªÄ & X·ª¨ L√ù L√ÄM B√ÄI
# ================================
if st.session_state.quiz_data and 'questions' in st.session_state.quiz_data:
    TIME_LIMIT = 15 * 60  # 15 ph√∫t
    questions = st.session_state.quiz_data['questions']

    # B·∫Øt ƒë·∫ßu t√≠nh gi·ªù khi ƒë·ªÅ ƒë∆∞·ª£c hi·ªÉn th·ªã
    if st.session_state.start_time is None:
        st.session_state.start_time = time.time()

    st.markdown("---")
    st.header(f"üìù ƒê·ªÅ ki·ªÉm tra m√¥n {subject} - L·ªõp {grade}")

    # ================================
    # CH∆ØA N·ªòP B√ÄI -> HI·ªÇN TH·ªä FORM L√ÄM B√ÄI
    # ================================
    if not st.session_state.submitted:
        with st.form("quiz_form"):
            for i, q in enumerate(questions):
                st.subheader(f"C√¢u {i + 1}: {q['question']}")
                if q['type'] == 'mcq':
                    st.session_state.user_answers[i] = st.radio(
                        "Ch·ªçn ƒë√°p √°n:",
                        q['options'],
                        key=f"q_{i}",
                        index=None, # Kh√¥ng ch·ªçn s·∫µn ƒë√°p √°n n√†o
                        label_visibility="collapsed"
                    )
                elif q['type'] == 'true_false': # S·ª≠a l·∫°i cho kh·ªõp JSON
                    st.session_state.user_answers[i] = st.radio(
                        "Ch·ªçn ƒë√°p √°n:",
                        ["ƒê√∫ng", "Sai"],
                        key=f"q_{i}",
                        index=None,
                        label_visibility="collapsed"
                    )
                st.markdown("---")

            submitted = st.form_submit_button("üèÅ N·ªôp b√†i")

            if submitted:
                st.session_state.submitted = True
                st.rerun() # T·∫£i l·∫°i trang ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£

    # ================================
    # ƒê√É N·ªòP B√ÄI -> HI·ªÇN TH·ªä K·∫æT QU·∫¢
    # ================================
    else:
        # --- 1. T√≠nh to√°n k·∫øt qu·∫£ ---
        score = 0
        correct_answers_map = {}
        for i, q in enumerate(questions):
            user_answer = st.session_state.user_answers.get(i)
            correct_option_text = None
            if q['type'] == 'mcq':
                correct_option_text = next((opt for opt in q['options'] if opt.strip().startswith(q['answer'])), None)
            elif q['type'] == 'true_false':
                 correct_option_text = q['answer']

            if user_answer == correct_option_text:
                score += 1
            correct_answers_map[i] = correct_option_text

        total = len(questions)
        st.success(f"üéØ **K·∫øt qu·∫£ c·ªßa b·∫°n: {score}/{total} c√¢u ƒë√∫ng ({score/total*100:.1f}%)**")
        if score == total:
            st.balloons()

        # --- 2. Hi·ªÉn th·ªã ƒë√°p √°n chi ti·∫øt ngay l·∫≠p t·ª©c ---
        with st.expander("üßæ Xem l·∫°i ƒë√°p √°n chi ti·∫øt", expanded=True):
            for i, q in enumerate(questions):
                user_answer = st.session_state.user_answers.get(i)
                correct_answer = correct_answers_map.get(i)
                
                st.markdown(f"**C√¢u {i+1}:** {q['question']}")
                
                if user_answer == correct_answer:
                    st.write(f"‚úÖ B·∫°n ch·ªçn: {user_answer} (ƒê√∫ng)")
                else:
                    st.write(f"‚ùå B·∫°n ch·ªçn: {user_answer or 'Ch∆∞a ch·ªçn'}")
                    st.info(f"üëâ ƒê√°p √°n ƒë√∫ng: {correct_answer}")
                st.markdown("---")

        # --- 3. N√∫t l√†m l·∫°i b√†i ---
        if st.button("üîÅ L√†m l·∫°i b√†i m·ªõi", type="primary"):
            # X√≥a to√†n b·ªô tr·∫°ng th√°i c≈© ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i
            for key in st.session_state.keys():
                del st.session_state[key]
            st.rerun()